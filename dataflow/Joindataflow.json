{
	"name": "Joindataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureblobsourceEmployee",
						"type": "DatasetReference"
					},
					"name": "Employeedetails"
				},
				{
					"dataset": {
						"referenceName": "AzurebolobsoruceEmpdepart",
						"type": "DatasetReference"
					},
					"name": "DepartmentDetails"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DestincationStorage",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Employeedetailsjoins"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "SortbyName"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"script": "source(output(\n\t\tEmpID as string,\n\t\tEmpName as string,\n\t\tDepartmentID as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> Employeedetails\nsource(output(\n\t\tDepartmentID as string,\n\t\tDepartName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DepartmentDetails\nEmployeedetails, DepartmentDetails join(Employeedetails@DepartmentID == DepartmentDetails@DepartmentID,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> Employeedetailsjoins\nEmployeedetailsjoins derive(Country = upper(Country),\n\tpartitionBy('hash', 1)) ~> DerivedColumn1\nDerivedColumn1 sort(asc(EmpName, true),\n\tcaseInsensitive: true,\n\tpartitionBy('hash', 1)) ~> SortbyName\nSortbyName select(mapColumn(\n\t\tEmpID,\n\t\tEmpName,\n\t\tCountry,\n\t\tDepartName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['JoinEmployeeData.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
		}
	}
}